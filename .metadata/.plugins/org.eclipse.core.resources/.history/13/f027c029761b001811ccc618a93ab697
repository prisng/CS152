object dds {
  /********** #1 **********/
  // Tail-recursive implementation of controlLoop
	def controlLoop[S](state: S, cycle: Int, halt: (S, Int) => Boolean, update: (S, Int) => S): S =
		if (halt(state, cycle)) state
		else controlLoop(update(state, cycle), cycle + 1, halt, update)
		
  /********** #2 **********/
  // Initial pop = 1, doubles every week, stops after pop > 10^5, final pop = ?
	def amoebaPop(): Int = {
		val birthRate = 2
		def updatePop(currentPop: Int, numWeeks: Int) = currentPop * birthRate
		def halt(currentPop: Int, numWeeks: Int) = (currentPop > scala.math.pow(10, 5))
		controlLoop(1, 0, halt, updatePop)
	}
	val finalPop = amoebaPop()
	
	// The final population size is 131072.
	
  /********** #3 **********/
  	def solve(f: Double => Double): Double = {
  		// Note: the smaller the delta, the longer it takes to run
		val delta = 0.00001

		// Derivative equation: except you get rid of the limit part (just an approximation)
		def df(x: Double) = (f(x + delta) - f(x)) / delta
		
		def improveApprox(guess: Double, numGuesses: Int) =
			guess - (f(guess) / df(guess))
			
		def halt(guess: Double, numGuesses: Int) =
			math.abs(f(guess)) <= delta
			
		controlLoop(1.0, 0, halt, improveApprox)
	}
  
  // --- Tester functions --- //
  // x^2 - x - 6 = 0 => x = 3, x = -2
  def f(x: Double) = x * x - x - 6
  // x^2 + 3x - 4 = 0 => x = 1, x = -4
  def g(x: Double) = x * x	+ 3 * x - 4
  
  solve(f)
  solve(g)
  
  /********** #4 **********/
  
  def squareRoot(x: Double) = {
  		def f(y: Double) = y * y - x
  		solve(f)
  	}
  
  squareRoot(9)
  squareRoot(16)
  squareRoot(25)
  
  /********** #5 **********/
  
  def cubeRoot(x: Double) = {
  		def f(y: Double) = y * y * y - x
  		solve(f)
  }
  
  cubeRoot(27)
  cubeRoot(64)
  cubeRoot(125)
  
  /********** #6 **********/
  
  def nthRoot(x: Double, n: Int) = {
  		def f(y: Double): Double = {
  			if (solve(f) == 0) 0.0
  			else f(y * y - x)
  		}
  }
  
  nthRoot(9, 2)
  // r where |rn â€“ x | <= delta
  
}