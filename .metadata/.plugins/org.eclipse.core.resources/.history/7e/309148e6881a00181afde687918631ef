object session {

  /********** #1 **********/
  // Generic compose combinator
  // (the input of f should be the same as the output of g)
	def compose[A, B](f: A => B, g: B => A): B => B = {
		def r(x: B):
			B = f(g(x));
   	r _
	}
	
	// --- Tester functions --- //
	def triple(x: Int): Int = 3 * x
	def square(x: Int) = x * x
	val squareTriple = compose(square _, triple _)
	// Test without composition function
	square(triple(2))
	square(triple(5))
	
	// Testing the composition function
	squareTriple(2)
	squareTriple(5)
	
  
  /********** #2 **********/
  
  def selfIter[T](f: T=>T, n: Int): T => T = {
  //f composed with itself n times.
  		if (n == 0) f
  		else	 {
  			def test = selfIter(f, n - 1)
  			compose(f, test)
  		}
  }
  
  // --- Tester functions --- //
  def inc(x: Double) = x + 1
	def double(x: Double) = 2 * x
	
	// Testing the selfIter function
	def doubleIncSelfIter(n: Int, m: Int) = {
		def innerTest = selfIter(compose(double, inc), m)
		innerTest(n)
	}
	
	// double(inc(3)) = double(4) = 8
	doubleIncSelfIter(3, 0)
	//
	doubleIncSelfIter(5, 3)
	
	/*
def selfIter3[T](f: T=>T, n: Int): T => T = Function.chain(List.fill(n)(f))
println(selfIter3[Double](compose(double, inc), 2)(2.0))
*/

  /********** #3 **********/
  
  
  /********** #4 **********/
  
  
  /********** #5 **********/
  
  
}