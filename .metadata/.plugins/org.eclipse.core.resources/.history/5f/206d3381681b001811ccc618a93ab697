object dds {
  /********** #1 **********/
  // Tail-recursive implementation of controlLoop
	def controlLoop[S](state: S, cycle: Int, halt: (S, Int) => Boolean, update: (S, Int) => S): S =
		if (halt(state, cycle)) state
		else controlLoop(update(state, cycle), cycle + 1, halt, update)
                                                  //> controlLoop: [S](state: S, cycle: Int, halt: (S, Int) => Boolean, update: (S
                                                  //| , Int) => S)S
		
  /********** #2 **********/
  // Initial pop = 1, doubles every week, stops after pop > 10^5, final pop = ?
	def amoebaPop(): Int = {
		val birthRate = 2
		def updatePop(currentPop: Int, numWeeks: Int) = currentPop * birthRate
		def halt(currentPop: Int, numWeeks: Int) = (currentPop > scala.math.pow(10, 5))
		controlLoop(1, 0, halt, updatePop)
	}                                         //> amoebaPop: ()Int
	val finalPop = amoebaPop()                //> finalPop  : Int = 131072
	
	// The final population size is 131072.
	
  /********** #3 **********/
  
  	def solve(f: Double => Double): Double = {
	
		val delta = 1e-5	// the smaller the delta, the longer it takes to run
		
		// Derivative equation: except you get rid of the limit part (just an approximation)
		def df(x: Double) = (f(x + delta) - f(x)) / delta
		
		// Update function
		def improve(guess: Double, numGuesses: Int) =
			guess - (f(guess) / df(guess))	// d = derivative of f
			
		// Halt function
		def goodEnuf(guess: Double, numGuesses: Int) =
			math.abs(f(guess)) <= delta
			
		controlLoop(1.0, 0, goodEnuf, improve)
	}
  
  /********** #4 **********/
  
  /********** #5 **********/
  
  /********** #6 **********/
  
}