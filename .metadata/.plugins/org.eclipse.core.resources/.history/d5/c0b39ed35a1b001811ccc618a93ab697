object session {

  /********** #1 **********/
  // Generic compose combinator
  // (the input of f should be the same as the output of g)
	def compose[A, B](f: A => B, g: B => A): B => B = {
		def r(x: B):
			B = f(g(x));
   	r _
	}                                         //> compose: [A, B](f: A => B, g: B => A)B => B
	
	// --- Tester functions --- //
	def triple(x: Int): Int = 3 * x           //> triple: (x: Int)Int
	def square(x: Int) = x * x                //> square: (x: Int)Int
	val squareTriple = compose(square _, triple _)
                                                  //> squareTriple  : Int => Int = session$$$Lambda$10/434091818@2acf57e3
	// Test without composition function
	square(triple(2))                         //> res0: Int = 36
	square(triple(5))                         //> res1: Int = 225
	
	// Testing the composition function
	squareTriple(2)                           //> res2: Int = 36
	squareTriple(5)                           //> res3: Int = 225
	
  
  /********** #2 **********/
  // f is composed with itself n times
  def selfIter[T](f: T=>T, n: Int): T => T = {
  		def id[T](x: T) = x
  		if (n == 0) id
  		else	 {
  			def test = selfIter(f, n - 1)
  			compose(f, test)
  		}
  }                                               //> selfIter: [T](f: T => T, n: Int)T => T
  
  // --- Tester functions --- //
  def inc(x: Double) = x + 1                      //> inc: (x: Double)Double
	def double(x: Double) = 2 * x             //> double: (x: Double)Double
	
	// Testing the selfIter function
	val selfDouble = selfIter(double _, 3)    //> selfDouble  : Double => Double = session$$$Lambda$10/434091818@60f82f98
	// double(double(double(5))) = double(double(10)) = double(20) = 40
	selfDouble(5)                             //> res4: Double = 40.0
	val selfInc = selfIter(inc _, 2)          //> selfInc  : Double => Double = session$$$Lambda$10/434091818@7f690630
	// inc(inc(5)) = inc(6) = 7
	selfInc(5)                                //> res5: Double = 7.0
	val doubleIncSelfIter = selfIter(compose(double _, inc _), 3)
                                                  //> doubleIncSelfIter  : Double => Double = session$$$Lambda$10/434091818@56677
                                                  //| 6ad
	// double(inc(double(inc(double(inc(4))))))
	// = double(inc(double(inc(double(5)))))
	// = double(inc(double(inc(10))))
	// = double(inc(double(11)))
	// = double(inc(22))
	// = double(23) = 46
	doubleIncSelfIter(4)                      //> res6: Double = 46.0

  /********** #3 **********/
  
  
  /********** #4 **********/
  
  
  /********** #5 **********/
  
  
}