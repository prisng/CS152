object dds {
  /********** #1 **********/
  // Tail-recursive implementation of controlLoop
	def controlLoop[S](state: S, cycle: Int, halt: (S, Int) => Boolean, update: (S, Int) => S): S =
		if (halt(state, cycle)) state
		else controlLoop(update(state, cycle), cycle + 1, halt, update)
		
  /********** #2 **********/
  // Initial pop = 1, doubles every week, stops after pop > 10^5, final pop?
  val birthRate = 2
  def updatePop(currentPop: Int, maxPop: Int) = {
  		// Tester line
		println("currentPop = " + currentPop)
		(currentPop * birthRate).toInt
  }
	def stopDemo(currentPop: Int, maxPop: Int) =
		(currentPop > scala.math.pow(10, 5))
	controlLoop(1, 0, stopDemo, updatePop)
	// The final population size is 131072.
	
	def population(): Int = {
  		def halt(pop: Int, cycle: Int) = pop >= 100000
  		def update(pop: Int, cycle: Int) = 2 * pop
  		println(controlLoop(1, 0, halt, update))
  }
	
  /********** #3 **********/
  
  /********** #4 **********/
  
  /********** #5 **********/
  
  /********** #6 **********/
  
}